{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/Convertation.tsx","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","getMovie","query","fetch","then","res","json","catch","Response","Error","convert","data","Title","Plot","Poster","imdbID","FindMovie","addMovie","useState","setQuery","movieLoading","setMovieLoading","error","setError","result","setResult","errorValue","setErrorValue","sendQuery","event","a","preventDefault","response","finally","isDisabled","trim","useEffect","onSubmit","htmlFor","type","id","placeholder","classNames","value","onChange","target","disabled","onClick","App","setMovies","newMovie","some","item","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a1b104f7.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=f7089824';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { Movie } from '../types/Movie';\nimport { MovieData } from '../types/MovieData';\n\nexport const convert = (data: MovieData): Movie => {\n  return {\n    title: data.Title,\n    description: data.Plot,\n    imgUrl: data.Poster === 'N/A'\n      ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n      : data.Poster,\n    imdbUrl: `https://www.imdb.com/title/${data.imdbID}`,\n    imdbId: data.imdbID,\n  };\n};\n","import React, { useEffect, useState } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport { Movie } from '../../types/Movie';\nimport { MovieData } from '../../types/MovieData';\nimport { getMovie } from '../../api';\nimport { ResponseError } from '../../types/ReponseError';\nimport { convert } from '../Convertation';\nimport { MovieCard } from '../MovieCard/MovieCard';\n\ninterface Props {\n  addMovie: (movie: Movie) => void;\n}\n\nexport const FindMovie: React.FC<Props> = ({ addMovie }) => {\n  const [query, setQuery] = useState('');\n  const [movieLoading, setMovieLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [result, setResult] = useState<MovieData | null>(null);\n  const [errorValue, setErrorValue] = useState('');\n\n  const sendQuery = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setMovieLoading(true);\n\n    getMovie(query).then((response: MovieData | ResponseError) => {\n      if ('Title' in response) {\n        setResult(response);\n      } else {\n        setError(true);\n        setErrorValue(response.Error);\n      }\n    })\n      .finally(() => setMovieLoading(false));\n  };\n\n  const reset = () => {\n    setQuery('');\n    setResult(null);\n  };\n\n  const isDisabled = query.trim();\n\n  const addToMovieList = () => {\n    if (result) {\n      addMovie(convert(result));\n      reset();\n    }\n  };\n\n  useEffect(() => {\n    setError(false);\n  }, [query]);\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={sendQuery}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input',\n                { 'is-danger': error })}\n              value={query}\n              onChange={(event) => setQuery(event.target.value)}\n            />\n          </div>\n\n          {error && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              {errorValue}\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames('button is-light',\n                { 'is-loading': movieLoading })}\n              disabled={!isDisabled}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {result && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={addToMovieList}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {result && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={convert(result)} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const handleAdd = (newMovie: Movie) => {\n    setMovies(movie => {\n      const isAdded = movie.some(item => (\n        item.imdbId === newMovie.imdbId\n      ));\n\n      if (!isAdded) {\n        return [...movie, newMovie];\n      }\n\n      return movie;\n    });\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie addMovie={handleAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}